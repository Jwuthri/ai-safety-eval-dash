"""
ai-safety-eval-dash - FastAPI Backend
A FastAPI + Next.js AI agent application with OpenRouter and Agno

Auto-generated by cookiecutter-fastapi-nextjs-llm
"""

from contextlib import asynccontextmanager

import uvicorn
from app.api.v1.router import api_router
from app.config import get_settings
from app.core.config.validation import setup_config_validation
from app.core.monitoring import setup_monitoring
from app.core.tracing import (
    initialize_tracing,
    instrument_fastapi_app,
    shutdown_tracing,
)
from app.dependencies import (
    cleanup_request_scope,
    cleanup_services,
    initialize_services,
)
from app.exceptions import setup_exception_handlers
from app.middleware import setup_middleware
from app.models.base import APIInfo
from fastapi import FastAPI


from .utils.logging import get_logger, setup_logging

# Get settings
settings = get_settings()

# Setup logging FIRST before anything else
setup_logging(settings.log_level, settings.environment)

logger = get_logger("main")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager."""
    # Startup
    try:
        # Validate configuration first
        setup_config_validation(settings)
        logger.info("Configuration validation completed")

        # Initialize distributed tracing
        if settings.enable_tracing:
            tracing_initialized = initialize_tracing(settings)
            if tracing_initialized:
                logger.info("Distributed tracing initialized successfully")
            else:
                logger.warning("Failed to initialize distributed tracing")

        # Initialize services
        await initialize_services()
        logger.info("All services initialized successfully")
        yield
    except Exception as e:
        logger.error(f"Failed to initialize services: {e}")
        raise
    finally:
        # Shutdown
        try:
            await cleanup_services()
            logger.info("All services cleaned up successfully")

            # Shutdown tracing
            if settings.enable_tracing:
                shutdown_tracing()
                logger.info("Distributed tracing shutdown completed")
        except Exception as e:
            logger.error(f"Error during shutdown: {e}")


# Initialize FastAPI app with lifespan
app = FastAPI(
    title=f"{settings.app_name} API",
    description=settings.description,
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan
)

# Setup middleware
setup_middleware(app)

# Setup distributed tracing instrumentation
if settings.enable_tracing:
    instrument_fastapi_app(app, settings)
    logger.info("FastAPI tracing instrumentation enabled")

# Setup exception handlers
setup_exception_handlers(app)

# Setup monitoring and metrics collection
setup_monitoring(app, settings)

# Include API routes
app.include_router(api_router, prefix="/api")



# Root endpoint
@app.get("/", response_model=APIInfo)
async def root() -> APIInfo:
    """Root endpoint with API information."""
    return APIInfo(
        name=f"{settings.app_name} API",
        version=settings.app_version,
        description=settings.description,
        docs_url="/docs",
        health_url="/health"
    )

# Legacy health endpoint (redirect to v1)
@app.get("/health")
async def health_redirect():
    """Legacy health endpoint - redirects to v1."""
    from fastapi import RedirectResponse
    return RedirectResponse(url="/api/v1/health")

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.reload,
        log_config=None,  # Use our Rich logging config instead
        workers=1 if settings.reload else settings.workers
    )
